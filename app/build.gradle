apply plugin: 'com.android.application'
apply plugin: 'walle'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.example.wood121.viewdemos"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        flavorDimensions "versionCode"
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wood121"]

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    //签名文件设置
    signingConfigs {
        release {
            storeFile file("../VFDemos_wood121.jks")
            storePassword "461911"
            keyAlias "wood"
            keyPassword "461911liu"
        }
    }

    //apk构建设置
    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            //代码混淆设置，在release版本发布出去的时候需要
            shrinkResources true  //删除所有那些在项目中不会使用的资源
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //Gradle 4.+后需要新的写法
//    android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            def fileName = "VFDemos_v${defaultConfig.versionName}__${variant.getBuildType().name}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
//            outputFileName = fileName
//        }
//    }

    /*配置渠道*/
//    productFlavors {
//        yingyongbao {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
//        }
//        wandoujia {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//        }
//        xiaomi {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
//        }
//    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
            //说明so的路径为该libs路径，关联所有地图SDK的so文件
        }
    }

    configurations {
        all*.exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'fm.jiecao:jiecaovideoplayer:5.5.2'
    implementation 'com.github.jokermonn:permissions4m:2.1.2-lib'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
//    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'com.github.jokermonn:permissions4m:2.1.2-processor'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.1'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    implementation 'com.github.lovetuzitong:MultiImageSelector:1.2'
    implementation 'com.meituan.android.walle:library:1.1.6'

    //引用module中的类库
//    implementation project(':localrepo')
    //引用locaol maven的library
//    implementation 'com.wood121:viewdemos:1.0'
}

//walle {
//    // 指定渠道包的输出路径
//    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
//    // 定制渠道包的APK的文件名称
//    apkFileNameFormat = 'VFDemos-${channel}-${buildType}-v${versionName}.apk'
//    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
//    channelFile = new File("${project.getProjectDir()}/channel")//渠道配置文件的位置
//    //configFile = new File("${project.getProjectDir()}/config.json")
//
//    configFile
//}

/** ***********************以下为gradle -task练习********************** **/
/**
 * Task定义声明,四种创建方式,第四种name的方式有问题？
 */
task taskNothing

task taskWithA {
    println("taskWithA")
}

task(taskWithB) {
    println("taskWithB")
}

//task(name: taskWithC) {
//    println("taskWithC")
//}

/**
 * task内容格式，大部分的内容要写在doFirst{}/doLast{}中，内容结果如下所示：
 *
 * > Configure project :
 taskWithA
 taskWithB
 Configuration 阶段和 Execution 阶段皆会执行

 * > Task :myTask
 before execute myTask
 after execute myTask
 */
task myTask {
    println 'Configuration 阶段和 Execution 阶段皆会执行'

    doFirst {
        println "before execute myTask"
    }

    doLast {
        println "after execute myTask"
    }
}

/**
 * task被支持的Task类的写法
 */
//class GreetingTask extends DefaultTask {
//    String greeting = 'hello from GreetingTask'
//
//    @TaskAction
//    def greet() {
//        println greeting
//    }
//}

/**
 * 安装包、并启动：必须放置在app.gradlew中才能有效执行
 * adb命令行方式：
 * adb install -r app-debug.apk
 * adb shell am start -n 包名/首 Activity
 *
 * gralde自动化调用命令行:
 * dependsOn：因为安装前提必须有个apk，所以需要进行依赖
 * workingDir为工作环境，commandLine需要命令行执行的命令（参数为list）
 */
task installAndRun(dependsOn: 'assembleDebug') {
    doFirst {
        exec {
            workingDir("${buildDir} /outputs/apk/debug")
            commandLine 'adb', 'install', '-r', 'app-debug.apk'
        }
        exec {
            def path = "${buildDir}/intermediates/manifests/full/debug/AndroidManifest.xml"
            def parser = new XmlParser(false, false).parse(new File(path))
            parser.application.activity.each { activity ->
//                activity.'intent-filter'.each { filter ->
//                    if (filter.action.@"android:name".contains("android.intent.action.MAIN")) {
//                        def targetActivity = activity.@"android:name"
//                        commandLine 'adb', 'shell', 'am', 'start', '-n', "${android.defaultConfig.applicationId}/${targetActivity}"
//                        println("马上要到commandLine")
//                    }
//                }

                if (activity.@"android:name".contains("MainActivity")) {
                    def targetActivity = activity.@"android:name"
                    commandLine 'adb', 'shell', 'am', 'start', '-n', "${android.defaultConfig.applicationId}/${targetActivity}"
                    println("马上要到commandLine")
                }
            }
        }
    }
}

task hookAssets {
    afterEvaluate {
        tasks.findByName("packageDebug").doFirst { task ->
            copy {
                from "${projectDir.absolutePath}/test.png"
                into "${buildDir}/intermediates/assets/debug"
                println('执行到这了')
            }
        }
    }
}

/** ***********************以下为gradle plugin练习********************** **/
/**
 *  脚本插件，创建config.gradle，然后其它gradle文件进行引用
 */
apply from: "../config.gradle"

/**
 * gradle脚本中直接实现plugin接口，  【第一种对象插件的写法】 官方demo
 */
//apply plugin: GreetingPlugin

//class GreetingPlugin implements Plugin<Project> {
//
//    @Override
//    void apply(Project target) {
//        def extension = project.extensions.create('greeting', GreetingPluginExtension)
//        target.task('hello') {
//            doLast {
////            println('hello from the GreetingPlugin')
//                println extension.message
//            }
//        }
//    }
//}

/**
 * gradle脚本做可配置的扩展
 */

/**
 * 使用本项目的module创建plugin（本项目内module通用的插件），
 * 也可升级为项目通用的（上传到Maven仓库）
 */
apply plugin: TestPlugin
testExtension {
    message 'hello gradle,我是wood121啊'
}

